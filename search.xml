<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>nvn</title>
    <url>/2021/07/22/hello-world/</url>
    <content><![CDATA[<p>欢迎来到我的个人博客，这里会记录一些生活上遇到的问题和解决办法。希望对你有所启发^v^</p>
]]></content>
  </entry>
  <entry>
    <title>qt学习记录2</title>
    <url>/2021/08/24/qt-2/</url>
    <content><![CDATA[<p>1.QMainWindow</p>
<p>​    1.1 菜单栏 最多有一个</p>
<p>​        1.1.1 QMenuBar * bar=MenuBar();</p>
<p>​        1.1.2 setMenuBar(bar)</p>
<p>​        1.1.3 QMenu * fileMenu = bar -&gt;addMenu(“文件”) 创建菜单</p>
<p>​        1.1.4QAction * newAction =fileMenu -&gt;addAction(“新建”);</p>
<p>​        1.1.5添加分割线 fileMenu -&gt;addSeparator();</p>
<span id="more"></span>

<p>​    1.2工具栏可以有多个</p>
<p>​        1.2.1 QToolBar *toolbar = newQToolBar(this)</p>
<p>​        1.2.2 addToolBar(默认停靠区域,toolbar); Qt::LeftToolBarArea</p>
<p>​        1.2.3设置 后期停靠区域,设置浮动,设置移动</p>
<p>​        1.2.4添加菜单项 或者添加小控件</p>
<p>​    1.3状态栏</p>
<p>​        1.3.1 QStatusBar *StBar = statusBar();</p>
<p>​        1.3.2设置到窗口中 setStatusBar(stBar);</p>
<p>​        1.3.3 stBar-&gt;addWidget(label);放左侧信息</p>
<p>​        1.3.4 stBar-&gt;addPermanentWidget(label2);放右侧信息</p>
<p>​    1.4 铆接部件 浮动窗口</p>
<p>​        1.4.1 QDockWidget</p>
<p>​        1.4.2 addDockWidget 默认停靠区域，浮动窗口指针</p>
<p>​        1.4.3 设置后期停靠区域</p>
<p>​    1.5 设置核心部件 只能一个</p>
<p>​        1.5.1 setCentralWidget(edit);</p>
<p>2 资源文件</p>
<p>​    2.1 将图片文件 拷贝到项目位置下</p>
<p>​    2.2 右键项目-&gt;添加新文件-&gt;Qt-&gt;Qt resources file -&gt;给资源文件起名</p>
<p>​    2.3 res生成res.qrc</p>
<p>​    2.4 open in editor 编辑资源</p>
<p>​    2.5添加前缀 添加文件</p>
<p>​    2.6使用”: + 前缀名 + 文件名”</p>
<p>3 对话框</p>
<p>​    3.1.1 模态对话框 不可以对其他窗口进行操作 阻塞</p>
<p>​        3.1.1.1 QDialog dlg(this)</p>
<p>​        3.1.1.2 dlg.exec();</p>
<p>​    3.1.2 非模态对话框 可以对其他窗口进行操作</p>
<p>​        3.1.2.1 防止一闪而过 创建到堆区</p>
<p>​        3.1.2.2 QDialog *dlg = new QDialog(this);</p>
<p>​        3.1.2.3 dlg-&gt;show();</p>
<p>​        3.1.2.4dlg2-&gt;setAttribute(Qt::WA_DeleteOnClose); 关闭就删除，防止内存溢出</p>
<p>​    3.2 标准对话框–消息对话框</p>
<p>​        3.2.1 QMessagebox 静态成员函数 创建对话框</p>
<p>​        3.2.2 错误，信息，提问，警告</p>
<p>​        3.2.3 参数1 父亲 参数2 标题 参数3 显示内容 参数4 按键类型 参数5 默认关联回车按键</p>
<p>​        3.2.4 返回值 也是StandardButton类型,利用返回值判断用户的输入</p>
<p>​    3.3 其他标准对话框</p>
<p>​        3.3.1 颜色对话框 QColorDialog::getColor</p>
<p>​        3.3.2 文件对话框 QFileDialog::getOpenFileName(父亲，标题，默认路径,过滤文件)</p>
<p>​        3.3.3 字体对话框 QFontDialog::getFont</p>
<p>​    4 界面布局</p>
<p>​        4.1 实现登陆窗口</p>
<p>​        4.2 利用布局方式 给窗口进行美化</p>
<p>​        4.3 选取widget 进行布局，水平布局，垂直布局，栅格布局</p>
<p>​        4.4 给用户名，密码，登陆，退出按钮进行布局</p>
<p>​        4.5默认窗口和控件之间 有9间隙 ，可以调整 layoutLeftMargin</p>
<p>​        4.6利用弹簧进行布局</p>
<p>​    5 控件</p>
<p>​        5.1 按钮组</p>
<p>​            5.1.1 QPushButton 常用按钮</p>
<p>​            5.1.2 QToolButton 工具按钮 用于显示图片，如图想显示文字，修改风格：toolButtonStyle,凸起风格 autoRaise</p>
<p>​            5.1.3 radioButton 单选按钮，设置默认 ui-&gt;rBtnMan-&gt;setChecked(true);</p>
<p>​            5.1.4 checkbox 多选按钮,监听状态，2选中 1半选 0未选中</p>
<p>​        5.2 QListWidget 列表容器</p>
<p>​            5.2.1 QListWidget *item 一行内容</p>
<p>​            5.2.2 ui-&gt;listWidget-&gt;addItem(item)</p>
<p>​            5.2.3 设置居中方式 item-&gt;setTextAligment(Qt::AlignCenter);</p>
<p>​            5.2.4 可以利用additems 一次性添加整个诗的内容</p>
<p>​        5.3 QTreeWidget 树控件</p>
<p>​            5.3.1 设置头 </p>
<p>​                5.3.1.1 ui-&gt;treeWidget-&gt;setHeaderLabels(QStringList()&lt;&lt;”英雄”&lt;&lt;”英雄介绍”);</p>
<p>​            5.3.2 创建根节点</p>
<p>​                5.3.2.1 QTreeWidgetItem * liitem =new QTreeWidgetItem(QStringList()&lt;&lt;”力量”);</p>
<p>​            5.3.3 添加根节点 到树控件上</p>
<p>​                5.3.3.1 ui-&gt;treeWidget-&gt;addTopLevelItem(liitem);</p>
<p>​            5.3.4 添加子节点</p>
<p>​                5.3.4.1 liitem-&gt;addChild(l1);</p>
<p>​        5.4 QTableWidget 表格控件</p>
<p>​            5.4.1 设置列数</p>
<p>​                5.4.1.1 ui-&gt;tableWidget-&gt;setColumnCount(3);</p>
<p>​            5.4.2 设置水平表头</p>
<p>​                5.4.2.1 ui-&gt;tableWidget-&gt;setHorizontalHeaderLabels(QStringList()&lt;&lt;”姓名”&lt;&lt;”性别”&lt;&lt;”年龄”);</p>
<p>​            5.4.3 设置行数</p>
<p>​                5.4.3.1 ui-&gt;tableWidget-&gt;setRowCount(5);</p>
<p>​            5.4.4 设置正文</p>
<p>​                5.4.4.1 ui-&gt;tableWidget-&gt;setItem(0,0,new QTableWidgetItem(“亚瑟”));</p>
<p>​        5.5 其他控件介绍</p>
<p>​            5.5.1 stackWidget 栈控件</p>
<p>​                5.5.1.1 ui-&gt;stackedWidget-&gt;setCurrentIndex(1);</p>
<p>​            5.5.2 下拉框</p>
<p>​                5.5.2.1 ui-&gt;comboBox-&gt;addItem(“奔驰”);</p>
<p>​            5.5.3 QLabel显示图片</p>
<p>​                5.5.3.1 ui-&gt;lib_Image-&gt;setPixmap(QPixmap(“:/image/we.webp”));</p>
<p>​            5.5.4 QLabel 显示动图</p>
<p>​                5.5.4.1 ui-&gt;lib_movie-&gt;setMovie(movie);</p>
<p>​                5.5.4.2 movie-&gt;start();</p>
<p>​        </p>
]]></content>
      <tags>
        <tag>qt</tag>
      </tags>
  </entry>
  <entry>
    <title>qt学习记录1</title>
    <url>/2021/08/20/qt-1/</url>
    <content><![CDATA[<p>1.三种基类</p>
<p>qt有三种基类选择：QWidget,QMainWindow,Qdialog。QWidget是一个最简单的窗口，他是QMainWindow,Qdialog的父类，QMainWindow额外包含侧边栏和底边栏，Qdialog则额外包含对话框，选择框。</p>
<span id="more"></span>

<p>2.main函数简介</p>
<p>QApplication a应用程序对象，有且仅有一个</p>
<p>myWidget w 实例化窗口对象</p>
<p>w.show() 调用show函数 显示窗口</p>
<p>return a.exec() 让应用程序对象进入消息循环机制中，代码阻塞直至用户点击退出按钮</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span> <span class="comment">//包含一个应用程序类的头文件</span></span></span><br><span class="line"><span class="comment">//main程序入口 argc命令行变量的数量 argv命令行变量的数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//a应用程序对象，在Qt中，应用程序对象，有且仅有一个</span></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">//窗口对象 mywidget父类 -&gt; QWidget</span></span><br><span class="line">    myWidget w;</span><br><span class="line">    <span class="comment">//窗口对象 默认不会显示，必须要调用show方法显示窗口</span></span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="comment">//让应用程序对象进入消息循环，直至用户点击关闭按钮</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.工程文件介绍</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">QT</span>       <span class="string">+= core gui  //qt包含的模块</span></span><br><span class="line"></span><br><span class="line"><span class="meta">greaterThan(QT_MAJOR_VERSION,</span> <span class="string">4): QT += widgets //大于4版本以上 包含widget模块</span></span><br><span class="line"></span><br><span class="line"><span class="attr">CONFIG</span> <span class="string">+= c++11</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># You can make your code fail to compile if it uses deprecated APIs.</span></span><br><span class="line"><span class="comment"># In order to do so, uncomment the following line.</span></span><br><span class="line"><span class="comment">#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">SOURCES</span> <span class="string">+= \       //源文件</span></span><br><span class="line">    <span class="meta">main.cpp</span> <span class="string">\</span></span><br><span class="line"><span class="string">    mywidget.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">HEADERS</span> <span class="string">+= \       //头文件</span></span><br><span class="line">    <span class="attr">mywidget.h</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Default rules for deployment.</span></span><br><span class="line"><span class="attr">qnx</span>: <span class="string">target.path = /tmp/$$&#123;TARGET&#125;/bin</span></span><br><span class="line"><span class="attr">else</span>: <span class="string">unix:!android: target.path = /opt/$$&#123;TARGET&#125;/bin</span></span><br><span class="line"><span class="comment">!isEmpty(target.path): INSTALLS += target</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>TARGET= xxxx 目标生成的exe程序的名称</p>
<p>TEMPLATE=app 模板 应用程序模板 Application</p>
<p><img src="https://img-blog.csdnimg.cn/ef8346ef54a74718a17f6c35002aec6a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTY1NTc5,size_16,color_FFFFFF,t_70" alt="模块介绍"></p>
<p>4.按钮控件常用api</p>
<p>​    4.1创建QPushButton *Btn = new QPushButton</p>
<p>​    4.2设置父亲 setParent(this)</p>
<p>​    4.3设置文本 setText(“文字”)</p>
<p>​    4.4设置位置 move(宽，高)</p>
<p>​    4.5重新指定窗口大小 resize</p>
<p>​    4.6设置窗口标题 setWindowTitle</p>
<p>​    4.7设置窗口固定大小setFixedSize</p>
<p><img src="https://img-blog.csdnimg.cn/428640976951476b960f0531200a36ea.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTY1NTc5,size_16,color_FFFFFF,t_70" alt="对象树"></p>
<p>5.对象树</p>
<p>​    5.1当创建的对象在堆区时候，如果指定的父亲是QObject派生下来的类或者QObject子类派生下来的类，可以不用管理释放的操作，将对象会放入到对象树中。</p>
<p>​    5.2一定程度上简化了内存回收机制。</p>
<p>6.Qt中的坐标系</p>
<p>​    6.1 左上角为0,0点</p>
<p>​    6.2 x以右为正方向</p>
<p>​    6.3 y以下为正方向</p>
<p><img src="https://img-blog.csdnimg.cn/522755058b6443a3b03a1203d202fcf6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTY1NTc5,size_16,color_FFFFFF,t_70" alt="信号和槽"></p>
<p>7.信号和槽</p>
<p>​    7.1连接函数 connect</p>
<p><img src="https://img-blog.csdnimg.cn/753cd77849234278b1d7100b358ed427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTY1NTc5,size_16,color_FFFFFF,t_70" alt="连接"></p>
<p>​    7.2参数</p>
<p>​        7.2.1参数1 信号的发送者</p>
<p>​        7.2.2参数2 发送的信号</p>
<p>​        7.2.3参数3 信号的接收者</p>
<p>​        7.2.4参数4 处理的槽函数</p>
<p>​    7.3 松散耦合</p>
<p>​    7.4 实现点击按钮关闭窗口的案例</p>
<p>​    7.5 connect(btn,&amp;QPushButton::click,this,&amp;QWidget::close);</p>
<p><img src="https://img-blog.csdnimg.cn/8d3f3828d7d149a795f8508e7eca9208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTY1NTc5,size_16,color_FFFFFF,t_70" alt="连接2"></p>
<p>8.自定义信号和槽</p>
<p>​    8.1自定义信号</p>
<p>​        8.1.1写到signals下</p>
<p>​        8.1.2返回void</p>
<p>​        8.1.3 需要声明，不需要实现</p>
<p>​        8.1.4可以有参数，可以重载</p>
<p>​    8.2自定义槽函数</p>
<p>​        8.2.1 返回void</p>
<p>​        8.2.2 需要声明，也需要实现</p>
<p>​        8.2.3 可以有参数，可以重载</p>
<p>​        8.2.4 写到public slot下或者pubilc或者全局函数</p>
<p>​    8.3触发自定义的信号</p>
<p>​        8.3.1 emit 自定义信号</p>
<p>​    8.4案例下课后，老师触发饿了信号，学生响应信号，请客吃饭</p>
<p>9 当自定义信号和槽出现重载</p>
<p>​    9.1 需要利用函数指针 明确指向函数的地址</p>
<p>​    9.2 void(Teacher:: *tSignal)(QString) = &amp;Teacher::hungry;</p>
<p>​    9.3 QString 转成 char *</p>
<p>​        9.3.1 .Toutf8()转为QByteArray</p>
<p>​        9.3.2 .Data()转为Char*</p>
<p>​    9.4信号可以链接信号</p>
<p>​    9.5断开信号 disconnect</p>
<p>10.拓展</p>
<p>​    10.1.信号是可以连接信号</p>
<p>​    10.2.一个信号可以连接多个槽函数</p>
<p>​    10.3.多个信号 可以连接 同一个槽函数</p>
<p>​    10.4.信号和槽函数的参数 必须类型一一对应</p>
<p>​    10.5.信号和槽的参数个数 是不是要一致？信号的参数个数 可以多于槽函数个数</p>
<p>​    10.6信号槽可以断开连接 disconnect</p>
<p>11.qt4 版本写法</p>
<p>​    11.1 connect(信号的发送者，发送的信号 SIGNAL(信号),信号接收者，槽函数SLOT)</p>
<p>​    11.2优点参数直观</p>
<p>​    11.3确定 编译器不会检测参数类型</p>
<p>12.lambda表达式</p>
<p>​    12.1[]标识符 匿名函数</p>
<p>​        12.1.1 =值传递</p>
<p>​        12.1.2 &amp;引用传递</p>
<p>​    12.2 ()参数</p>
<p>​    12.3 {}实现体</p>
<p>​    12.4 mutable 修饰 值传递变量，可以修改拷贝出的数据，改变不了本体</p>
<p>​    12.5返回值<a href=""></a>-&gt;int {}</p>
<p>小练习</p>
<p>点击open打开另外一个界面，点击close关闭界面</p>
<p>widget.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">        QPushButton *btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="keyword">this</span>);</span><br><span class="line">        btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;Open&quot;</span>);</span><br><span class="line">        btn-&gt;<span class="built_in">move</span>(<span class="number">250</span>,<span class="number">180</span>);</span><br><span class="line">        <span class="built_in">resize</span>(<span class="number">600</span>,<span class="number">400</span>);</span><br><span class="line">        <span class="built_in">setWindowTitle</span>(<span class="string">&quot;work1&quot;</span>);</span><br><span class="line">        <span class="keyword">bool</span> switchb=<span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">connect</span>(btn,&amp;QPushButton::clicked,[=]()<span class="keyword">mutable</span>&#123;</span><br><span class="line">            s.<span class="built_in">resize</span>(<span class="number">800</span>,<span class="number">800</span>);</span><br><span class="line">            <span class="keyword">if</span>(switchb)&#123;</span><br><span class="line">                s.<span class="built_in">show</span>();</span><br><span class="line">                btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;Close&quot;</span>);</span><br><span class="line">                switchb=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                s.<span class="built_in">close</span>();</span><br><span class="line">                btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;Open&quot;</span>);</span><br><span class="line">                switchb=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//        QPushButton *btn2 = new QPushButton(this);</span></span><br><span class="line"><span class="comment">//        btn2-&gt;setText(&quot;Close&quot;);</span></span><br><span class="line"><span class="comment">//        btn2-&gt;move(350,180);</span></span><br><span class="line"><span class="comment">//        connect(btn2,&amp;QPushButton::clicked,[=]()&#123;</span></span><br><span class="line"><span class="comment">//            s.close();</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个小练习，我没有定义一个按钮类，直接调用的QPushButton</p>
<p>附上面相关的源码。</p>
<p>student.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line">Student::<span class="built_in">Student</span>(QObject *parent) : <span class="built_in">QObject</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::treat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;请老师吃饭&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::treat</span><span class="params">(QString foodName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//QString -&gt;char * 先转成QByteArray .toUtf8 再通过data 转成char *</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;请老师吃饭，老师要吃：&quot;</span> &lt;&lt; foodName.<span class="built_in">toUtf8</span>().<span class="built_in">data</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>student.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STUDENT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STUDENT_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Student</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="comment">//早期Qt版本 必须要写到public slots，高级版本可以写到 public或者全局下</span></span><br><span class="line">    <span class="comment">//返回值void，需要声明，也需要实现</span></span><br><span class="line">    <span class="comment">//可以有参数，可以发生重载</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">treat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">treat</span><span class="params">(QString foodName)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// STUDENT_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>teacher.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEACHER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEACHER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Teacher</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"><span class="comment">//自定义信号 写到signals下</span></span><br><span class="line"><span class="comment">//返回值是void，只需要声明，不需要实现</span></span><br><span class="line"><span class="comment">//可以有参数，可以重载</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hungry</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hungry</span><span class="params">(QString foodName)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TEACHER_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>teacher.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;teacher.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Teacher::<span class="built_in">Teacher</span>(QObject *parent) : <span class="built_in">QObject</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>widget.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;teacher.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;student.h&quot;</span></span></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="class"><span class="keyword">class</span> <span class="title">Widget</span>;</span> &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">    Teacher *zt;</span><br><span class="line">    Student *st;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">classIsOver</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>widget.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="comment">// Teacher 类 老师类</span></span><br><span class="line"><span class="comment">// Student 类 学生类</span></span><br><span class="line"><span class="comment">//下课后，老师会触发一个信号，饿了，学生响应信号，请客吃饭</span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//创建一个老师对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;zt = <span class="keyword">new</span> <span class="built_in">Teacher</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//创建一个学生对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;st = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //老师饿了 学生请客的链接</span></span><br><span class="line"><span class="comment">//    connect(zt,&amp;Teacher::hungry,st,&amp;Student::treat);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    //调用下课函数</span></span><br><span class="line"><span class="comment">//    classIsOver();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接带参数的 信号和槽</span></span><br><span class="line">    <span class="comment">//指针-&gt;地址</span></span><br><span class="line">    <span class="comment">//函数指针-&gt;函数地址</span></span><br><span class="line">    <span class="built_in"><span class="keyword">void</span></span>(Teacher:: *teacherSignal)(QString) = &amp;Teacher::hungry;</span><br><span class="line">    <span class="built_in"><span class="keyword">void</span></span>(Student:: *studentSlot)(QString) = &amp;Student::treat;</span><br><span class="line">    <span class="built_in">connect</span>(zt,teacherSignal,st,studentSlot);</span><br><span class="line">    <span class="comment">//classIsOver();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击一个下课按钮，再触发下课</span></span><br><span class="line">    QPushButton *btn=<span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;下课&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//重置窗口大小</span></span><br><span class="line">    <span class="built_in">resize</span>(<span class="number">600</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击按钮 触发下课</span></span><br><span class="line"><span class="comment">//    connect(btn,&amp;QPushButton::clicked,this,&amp;Widget::classIsOver);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参信号和槽链接</span></span><br><span class="line">    <span class="built_in"><span class="keyword">void</span></span>(Teacher:: *teacherSignal2)(<span class="keyword">void</span>) = &amp;Teacher::hungry;</span><br><span class="line">    <span class="comment">//void(Student:: *studentSlot2)(void) = &amp;Student::treat;</span></span><br><span class="line">    <span class="comment">//connect(zt,teacherSignal2,st,studentSlot2);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//信号链接信号</span></span><br><span class="line">    <span class="built_in">connect</span>(btn,&amp;QPushButton::clicked,zt,teacherSignal2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//断开信号</span></span><br><span class="line"><span class="comment">//    disconnect(zt,teacherSignal2,st,studentSlot2);</span></span><br><span class="line">    <span class="comment">//拓展</span></span><br><span class="line"><span class="comment">//    1.信号是可以连接信号</span></span><br><span class="line"><span class="comment">//    2.一个信号可以连接多个槽函数</span></span><br><span class="line"><span class="comment">//    3.多个信号 可以连接 同一个槽函数</span></span><br><span class="line"><span class="comment">//    4.信号和槽函数的参数 必须类型一一对应</span></span><br><span class="line"><span class="comment">//    5.信号和槽的参数个数 是不是要一致？信号的参数个数 可以多于槽函数个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    qt4版本以前的信号和槽连接方式</span></span><br><span class="line"><span class="comment">//    利用qt4信号槽 连接无参版本</span></span><br><span class="line"><span class="comment">//    qt4版本 底层SIGNAL(&quot;hungry&quot;)</span></span><br><span class="line">    <span class="built_in">connect</span>(zt,<span class="built_in">SIGNAL</span>(<span class="built_in">hungry</span>()),st,<span class="built_in">SLOT</span>(<span class="built_in">treat</span>()));</span><br><span class="line"><span class="comment">//    qt4版本有点，参数直观，缺点：类型不做检测</span></span><br><span class="line"><span class="comment">//    qt5以上支持qt4写法，反之不支持</span></span><br><span class="line"><span class="comment">//    QPushButton *btn2=new QPushButton;</span></span><br><span class="line"><span class="comment">//    [btn]()&#123;</span></span><br><span class="line"><span class="comment">//        btn-&gt;setText(&quot;aaaa&quot;);</span></span><br><span class="line"><span class="comment">//        btn2-&gt;setText(&quot;asads&quot;); //btn2看不到</span></span><br><span class="line"><span class="comment">//    &#125;();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//mutable 关键字 用于修饰值传递的变量，修改的是拷贝，不是本体</span></span><br><span class="line"><span class="comment">//    QPushButton *myBtn=new QPushButton(this);</span></span><br><span class="line"><span class="comment">//    QPushButton *myBtn2=new QPushButton(this);</span></span><br><span class="line"><span class="comment">//    myBtn2-&gt;move(100,100);</span></span><br><span class="line"><span class="comment">//    int m=10;</span></span><br><span class="line"><span class="comment">//    connect(myBtn,&amp;QPushButton::clicked,this,[m]()mutable&#123;m=100+10;qDebug()&lt;&lt;m;&#125;);</span></span><br><span class="line"><span class="comment">//    connect(myBtn2,&amp;QPushButton::clicked,this,[=]()&#123;qDebug()&lt;&lt;m;&#125;);</span></span><br><span class="line"><span class="comment">//    qDebug()&lt;&lt;m;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    int ret = []()-&gt;int&#123;return 1000;&#125;();</span></span><br><span class="line"><span class="comment">//    qDebug() &lt;&lt; &quot;ret=&quot; &lt;&lt; ret;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用lambda表达式 实现点击按钮 关闭窗口</span></span><br><span class="line">    QPushButton *btn2 =<span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="keyword">this</span>);</span><br><span class="line">    btn2-&gt;<span class="built_in">setText</span>(<span class="string">&quot;关闭&quot;</span>);</span><br><span class="line">    btn2-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//btn2-&gt;setParent(this);</span></span><br><span class="line">    <span class="built_in">connect</span>(btn2,&amp;QPushButton::clicked,[=]()&#123;</span><br><span class="line">        <span class="comment">//this-&gt;close();</span></span><br><span class="line"><span class="comment">//        emit zt-&gt;hungry(&quot;宫保鸡丁&quot;);</span></span><br><span class="line">          btn2-&gt;<span class="built_in">setText</span>(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//lambda表达式 最常用 [=]()&#123;&#125; &amp;有时候会报错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Widget::classIsOver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//下课函数，调用后 触发老师饿了的信号</span></span><br><span class="line">    <span class="comment">//emit zt-&gt;hungry();</span></span><br><span class="line">    emit zt-&gt;<span class="built_in">hungry</span>(<span class="string">&quot;宫保鸡丁&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>main.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    Widget w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>qt</tag>
      </tags>
  </entry>
</search>
